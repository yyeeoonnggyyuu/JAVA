
SQL  데이터베이스 

DB = 
데이터의 중요성 
실습환경구축


정형데이터 (Structured Data)
-미리정해진 구조에 따라 저장된 데이터
-정해진 형식과저장 구조를 바탕

반정형 데이터 (Semi-Stuctured Data)
-정형데이터와 달리 구조화되어 있지 않아서 연산이 불가능
-데이터 내부의 데이터 구조에

비정형데이터 ( Data_)



데이터 베이스 (Database)
-여러 사람이 공유하고 운영할 목적으로 관리되는 통합적인 정보의 집합

1. 관계형 데이터베이스 - 열과 행이 잇는테이블 집합, 정형데이터에 액세스하는 가장 효율적이고 유연한 방법을 제공
2.NoSQL 데이터베이스(중요_ - 관계형 데이터베이스 이외의 형식으로 데이터를 저장하는 데이터베이스로 대량의 분산된 데이터를저장하고 조회하는데 특화되어있다.
-객체지향 데이터베이스, 분산데이터베이스, 데이터 웨어하우스, 클라우드 데이터베이스, 자율운영데이터베이스



관계형 데이터베이스 (Relational Database)
행(Row), 관계(Relationship) , 기본키(Primary key), 열(column)


4대 RDBMS : MySQL , Oracle, MS-SQL , PostgreSQL

SQL: 관계형 데이터베이스 관리 시스템(RDBMS)의 데이터를 관리하고 다양한 데이터 동작을 수행하는데 사용되는표준화된 프로그래밍 언어
	

데이터 정의어 (DDL)
-데이터베이스의 구조를 정의할 때 사용하는 언어
-데이버테이스나 텡비ㅡㄹ, 인데스와 같은 데이터베이스 객체를 생성, 변경, 삭제할 때 사용함

데이터 조작어 (DML)
-데이터를 관리하는 데 사용하는 언어
-데이터 조작어는 레코드를 추가, 삭제하거나 데이터를 변경할 때 사용함
-데이터를 검색하는 데 사용하는 SELECT문은 데이터 조작어에 포함하기도 하고 데이터 질의어(DQL)로 분리하기도 함
(문제는 SELECT문에서 나온다 )
SELECT 
INSERT
UPDATE
DELETE

데이터 제어어 (DCL)
-데이터에 대한 액세스를 제어하기 위한 언어
-데이터베이스 객체나 데이터에 대한 권한을 관리하는 데 사용함

트랜잭션 제어어(TCL)
INSERT< UPDATE< DELETE문에 의 수행된 변경사항을 관리하는데 사용됨
DCL - GRANT - 권한부여
	REVOKE - 권한철회
TCL -COMMIT - 영구저장
	ROLLBACK - 변경사항 취소



MySQL 설치 

MySQL 8.0
https://dev.mysql.com/downloads/installer/

8.0.31 다운
설치 타입을 선택하는 [CHoosing a Setip Type] 창에서 [Custom]항목을 클릭하고 <Next>

[Select Products]창의 ' Available Products'에서 'MySql Server 8.0.31=x64'와 
MySQl Workbench 8.0.31-x64'를 'Products To Be Installed'로 옮긴 후 <Next>


<Execute> 버튼을 클릭하ㄹ여 설치 진행, 설치 끝나면 Next

Type and Networking 창에서 TCP/IP 와 Open wubdiows firewall ports for network access 항목 체크 확인 후 넥스트

Authentication MEthod 창에서 Use Legacy Authentication Method 항목 체크후 next

 관리자 비밀번호 mysql123 설정 후 next
windows service 창에서 next
그다음 계쏙 next
finish 누르면 워크벤치의 시작화면에 하단에 Local instance MySql
그다음 비밀번호 mysql123

실습:
스크립트 파일을 실행하여 데이터베이스와 테이블을일괄 생성함
https://www.hanbit.co.kr/src/40014

다운로드 후 C드라이브 Data 폴더 생성 후 압축해제


FIle - Open sql Script  클릭 후 - 압축해제한 폴더 -한빛무역- 데이터베이스 생성 스크립트 . sql 을 열기

11행 을 드래그하고 실행버튼 클릭 (번개표시 I)
실행이 완료되면 하단에 초록색 체크푯히가 나타남

왼쪽 Schamas를 누르면 한빛무역 생성이 된 걸 확인

USE 한빛무역 ; - 실행
고객 , 마일리지등급, 부서, 사원, 제품, 주문 , 주문세부 - 7개 각각 실행


고객정보 테이블오른쪽 클릭 Table Data Import wizard 선택
고객.csv 파일 선택 후 열기 그 후 next 계속하고 finish(93개 데이터 확인 )
나머지도 반복 실행 

(만약 실행 안될시 Database - Connect to Database - Default Schema 에 '한빛무역' 입력 후 실행)


데이터 죄회를 위한 SQL문 
-SELECT절, WHERE절, ORDER BY절, LIMIT n , 

SELECT문 :
형식 
SELECT 컬럼명
FROM 테이블명

컨트롤 + 쉬프트 + 엔터 는 전체실행
컨트롤 + 엔터는 부분실행
SELECT * FROM 고객; (* 모든걸 보여줘라는 뜻)

.. * 대신 내가 원하는  열(column)명 을 입력하면 그것만 뽑을 수 있음
SELECT 고객번호
	,담당자명
	,고객회사명
	,마일리지 AS 포인트  // 마일리지를  포인트로 변환
	,마일리지 * 1.1 AS "10%인상된 마일리지" //마일리지에 1.1을 곱하고 10% 인상된 마일리지로 변환
FROM 고객;
-----------------------
WHERE절 :
조건을 붙이고 싶을 때 WHERE 을 뒤에 붙임
EX-마일리지 10만점 이상인 고객의 고객번호, 담당자명, 마일리지 조회
SELECT 고객번호
,담당자명
,마일리지
FROM 고객
WHERE 마일리지 >=100000;


-----------------------------------
ORDER BY
 레코드를 순서대로 정렬하고자 할 때 사용함
오름차순 정렬 (ASC)-작은값부터 보여줌, 기본값
내림차순 정렬 (DESC) - 큰값부터 부여줌
EX- '서울특별시'에 사는 고객에 대해 고객번호, 담당자명, 도시, 마일리지를 조회  마일리지많은 고객부터 정렬(DESC)
SELECT 고객번호, 담당자명, 도시, 마일리지 AS 포인트
FROM 고객
WHERE 도시 = '서울특별시'
ORDER BY 마일리지 DESC;

-----------------------------------------
LIMIT n
반환되는 레코드의 개수를 지정할 수 있음
1행부터 시작하여 n개의 레코드를 가져오기 위해서는  문장의 맨마지막에 LIMIT n을 추가
시작해의 위치를 지정할 수 잇음
EX- 고객 테이블에서 1행부터 시작하여 3개의 고객정보를 조회하시오
SELECT *
FROM 고객
LIMIT 3;
EX= 마일리지가 많은 고객부터 상위 3명의 고객에 대한 모든 정보를 조회
SELECT *
FROM 고객
ORDER BY 마일리지 DESC
LIMIT 3;

-------------------------------

DISTINCT
데이터를 조회할 때 중복된 데이터를 한번만 보이고자 할 때 

EX-고객테이블의 도시 컬럼에 들어있는 값 중 중복되는 도시 데이터를 한번씩만 보이시오
SELECT DISTINCT 도시
FROM 고객;

-----------------------------
SQL 연산자
연산자 
-변수나 값으 ㅣ연산을 위해 사용되는부호
-연산자 단독으로 사용할 수 없음
-컬럼이나 상수 등과 함께 사용하ㅕㅇ 여러가지 계산작업을 수행할 수 있음
산술연산자
-더하기 + 빼기- 곱하기* 나누기 / 나머지 %
DIV 연산자 : 나누기에서 정수 결과를 얻을 때 사용
% 또는 MOD

EX- 두개의 숫자 23과 5로 산술연산자 +_*?%를 사용한 결과를 나타내시오 
DIV, MOD 연산자의 사용결과 함께확인
SELECT 23 + 5 AS 더하기  
,23 - 5 AS 빼기
,23 * 5 AS 곱하기
,23 / 5 AS 실수나누기
,23 DIV 5 AS 정수나누기
,23 % 5 AS 나머지1
,23 MOD 5 AS 나머지2;  
테이블에서 데이터를 가져오지 않는경우엔 FROM 절은 생략

--------------------------------------
비교연산자 
두값을 비교
1(TRUE) ,2(FAlSE)

EX- 두개의 숫자 23과 5로 비교 연산자 사용 결과
SELECT 23 >= 5  
,23 <= 5 
,23 > 5 
,23 < 5 
,23 = 5
,23 != 5 
,23 <> 5 ;  
EX -  담당자가 '대표이사'가 아닌 고객의 모든 정보를 보이시오
SELECT *
FROM 고객
WHERE 담당자직위 <> '대표 이사';
<> 아닌것만 찾아달라
여기선 대표이사 아닌것만 찾아라
즉, 두 값이 서로 다른 경우에 참(true)을 반환하는 조건을 나타냅니다.

------------------------------------
논리연산자 
표현식이 참인지 거짓인지를 확인하기 위해 사용하는 연산자
AND - 모든조건이 참인 레코드를 반환
OR - 여러조건중에서 하나 이상의 조건이 참인 레코드를 반환
NOT - 부정을 의미
AnB , AUB, 구분 잘하기
EX- 도시가 '부산광역시'이면서 마일리지가 1000점 보다 작은 고객의 모든 정보를 보이시오
SELECT *
FROM 고객
WHERE 도시 = '부산광역시'
AND 마일리지 < 1000;
--------------------
집합연산자 
합집합에 대한 연산자만 제공
주의할점 각셀렉문에서 컬럼의 수가 같아야함
	컬럼끼리의 타입까지 같아야함  숫자면 숫자 글자면글자

EX-'부산광역시'에 살거나 마일리지가 1000점보다 작은 고객에 대하여 고객번호, 담당자명, 마일리지, 도시를 보이시오 
이때 고객번호 순으로 정렬
SELECT 고객번호
		,담당자명
		,마일리지
        ,도시
FROM 고객
WHERE 도시 = '부산광역시'
UNION (합집합)
SELECT 고객번호
		,담당자명
        ,마일리지
        ,도시
FROM 고객
WHERE 마일리지 < 1000
ORDER BY 1; //ORDER BY절은 제일 마지막에 넣어줌
ORDER BY 마일리지 DESC //이면 마일리지 큰값부터 정렬

예제 2-13 부터 예제 3-11까지 




예제 3-12까지 한 듯 공부하기
----------------------------------
예제 3-13부터임 
09.27.금요일

숫자형함수 
숫자를 다루는 단일 행 함수를 통해 올림, 버림,반올림, 절댓값 반환, 나머지, 제곱승 등의 기능을 수행할 수 있음

CEILING() 올림, FLOOR()버림, ROUND(), TRUNCATE()
SELECT CEILING(123.56) //올림 결과값 124
      ,FLOOR(123.56) // 버림 결과값 123
      ,ROUND(123.56) // 반올림 결과값 124
      ,ROUND(123.56, 1) // 1의자리에서 반올림,지정자리수 반올림 결과값 123.6
      ,TRUNCATE(123.56, 1);  1의 자리에서 버림 결과값123.5


----------------------------
ABS 절대값을 반환하는 ㅂ함수
SIGN 양수의 경우 1 음수의 경우 -1을 반환
EX-  -120 과 120의 절댓값과 음수, 양수 여부 판별
SELECT ABS(-120)  //결과값 120
      ,ABS(120)	//결과값 120
      ,SIGN(-120)   //결과값 -1
      ,SIGN(120);    //결과값   1
----------------------

MOD() 나머지를 구하는 함수로 세가지 방법 가능
MOD(숫자1, 숫자2)
수자1 % 숫자2  (많이 씀)
숫자1 MOD 숫자2 

203을 4로 나눈 나머지를 확인
SELECT MOD(203, 4)
      ,203 % 4
      ,203 MOD 4;


------------------
POWER(), SQRT(), RAND()
POWER() n제곱승 값을 반환
SQRT() 제곱근 값을 반환
RAND() 랜덤값

SELECT POWER(2, 3)  2의 3승 
      ,SQRT(16)     루트16 
      ,RAND()        0과 1 사이의 임의의 실수(난수)를 생성합니다.
      ,RAND(100) 		시드 값 100을 사용하여 0과 1 사이의 동일한 난수를 생성합니다. 시드가 동일하면 결과도 동일합니다.
      ,ROUND(RAND() * 100);  0~100사이의 정수

----------------------------
현재 날짜/시간 반환 함수
NOW(), SYSDATE() : 시스테으미 현재 날짜와 시간
CURDATE() : 현재 날짜
CURTIME() : 현재 시간

SELECT NOW( )
      ,SYSDATE( )
      ,CURDATE( )
      ,CURTIME( );

----------------------
데이터 생성날짜 만들 때 많이 사용함
Ex-  가입날짜, 등등
SELECT NOW()
      ,YEAR(NOW())   현재년도
      ,QUARTER(NOW())  현재 월의 주차 (쿼터) (기업에서 쓰는 분기)
      ,MONTH(NOW())  현재 분기
      ,DAY(NOW())  현재날짜
      ,HOUR(NOW())  현재시간
      ,MINUTE(NOW())  현재 분
      ,SECOND(NOW());  현재 초

--------------------------------------
DATEDIFF(시작일자 , 끝일자)
,TIMESTAMPDIFF(단위, 시작일자 , 끝일자) //지정한 단위일자별로 나타내줌
SELECT NOW()
      ,DATEDIFF('2025-12-20', NOW()) // D-DAY 날짜 계산 며칠 후인지
      ,DATEDIFF(NOW(), '2025-12-20') //  D-DAY 날짜 계산 며칠 전인지
      ,TIMESTAMPDIFF(YEAR, NOW(), '2025-12-20') //  D-DAY 날짜 계산 몇년 후인지
      ,TIMESTAMPDIFF(MONTH, NOW(), '2025-12-20') //  D-DAY 날짜 계산  몇개월후 인지
      ,TIMESTAMPDIFF(DAY, NOW(), '2025-12-20'); //  D-DAY 날짜 계산 며칠 후인지

----------------------------------------------
ADD 뒤로 
SUB 앞으로
SELECT NOW()
      ,ADDDATE(NOW(), 50) 지정한 날짜를 기준으로 그 기간만큼 더한 날짜를 반환 지금시간에서 50시간 후 
      ,ADDDATE(NOW(), INTERVAL 50 DAY)
      ,ADDDATE(NOW(), INTERVAL 50 MONTH)
      ,SUBDATE(NOW(), INTERVAL 50 HOUR); 기간만큼 뺀 날짜를 반환 지금시간에서 50시간 전

------------------------

SELECT NOW()
      ,LAST_DAY(NOW())  해당 월의 마지막일자
      ,DAYOFYEAR(NOW())   현재 연도에서 며칠이 지났는지
      ,MONTHNAME(NOW()) 현재 월 
      ,WEEKDAY(NOW()); ??


-----------------------
SELECT CAST('1' AS UNSIGNED) 
      ,CAST(2 AS CHAR(1))
      ,CONVERT('1', UNSIGNED)
      ,CONVERT(2, CHAR(1));

-----------------------
중요함
형변환함수 : 데이터를 검색, 삽입할 때 컬럼에 맞는 형식으로 지정하지 않으면 오류가 나는 경우에 사용하는 함수
CAST() , 
CONVERT()
문자 '1'을 부호 없는 숫자형식으로, 숫자2를 문자형식으로 변환
SELECT CAST('1' AS UNSIGNED) 
      ,CAST(2 AS CHAR(1))
      ,CONVERT('1', UNSIGNED) 숫자를 문자로
      ,CONVERT(2, CHAR(1)); 문자를 숫자로

-------------------------------------
제어 흐름함수
-프로그램의 흐름을 제어할때 사용
-조건에 따른 결과를 sql문장 하나로 얻을 수 잇음

IF 
IF (조건, 수식1,수식2) : 조건의 결과가 참이면 수식1을반환, 그렇지않으면 수식2 반환

SELECT IF(12500 * 450 > 5000000, '초과달성', '미달성'); 
 	조건 12500*450 가 5000000보다 크면 초과달성 반환 아니면 미달성 반환
--------------------------------------
IFNULl():  IFNULL 함수는 첫 번째 인자가 NULL이면 두 번째 인자를 반환하고, 그렇지 않으면 첫 번째 인자를 반환하는 함수입니다.

IFNULL() 의 첫 매개변수 값이 NULL인지 여부에 따라 어떻게 결과가 다르게 나오는지 확인
SELECT IFNULL(1, 0) //첫 번째 인자가 1이므로 1을 반환합니다.
      ,IFNULL(NULL, 0) //첫 번째 인자가 NULL이므로 두 번째 인자인 0을 반환합니다.
      ,IFNULL(1/0, 'OK');  //1/0은 0으로 나누는 오류가 발생하지만, IFNULL 함수가 이를 처리하지 못해 SQL 실행 시 에러가 발생합니다.
			1/0 값자체가 없기 때문에 null이라서 ok를 출력
NULLIF 함수는 두 인자가 같으면 NULL을 반환하고, 다르면 첫 번째 인자를 반환합니다.
NULLIF() 을 사용하여 두 결과 비교
SELECT NULLIF(12 * 10, 120)  //두 값이 같으므로 NULL을 반환합니다.
	  ,NULLIF(12 * 10, 1200);  //두 값이 다르므로 첫 번째 값인 120을 반환합니다.
--------------------------------------
CASE 문 
- 함수는 아니지만조건 비교
WHEN 조건1 THEN 갑1 WHEN 조건2 THEN 값2
-모든 조건을 만족하지 않으면 ELSE 다음에 값을 넣어둠
- CASE문은 END 로 마무리

EX-
주문금액이 5,000,000원 이상이면 초과달성
4,000,000원 이상이면 달성
그 나머지 미달성 이라고 할때 
12,500원 제품을 450개 이상 주문했다면 어디에 달성하는지 확인
SELECT CASE WHEN 12500 * 450 > 5000000 THEN '초과달성'
WHEN 2500 * 450 > 4000000 THEN '달성'
ELSE '미달성'
END;


--------------------------------








